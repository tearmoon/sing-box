name: Build Core Android

on:
  push:
    paths-ignore:
      - '**.md'

jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        job:
          - { type: "armv7", id: "1" }
          - { type: "armv8", id: "1" }
    env:
      TAGS: with_quic,with_dhcp,with_wireguard,with_ech,with_utls,with_clash_api,with_gvisor,with_proxy_provider

    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: get latest go version
        id: version
        run: |
          echo go_version=$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g') >> $GITHUB_OUTPUT

      - name: Setup Go
        uses: actions/setup-go@v4.1.0
        with:
          go-version: ${{ steps.version.outputs.go_version }}
          
      - name: Setup NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r26b
          add-to-path: false
          local-cache: false

      - name: build core android
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          mkdir -p bin
          CC=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin
          VERSION=$(git describe --tags --abbrev=0)_$(git rev-parse --short HEAD)
          BUILDDATE=$(TZ=Asia/Jakarta date)

          if [[ "${{ matrix.job.type}}" == "armv8" ]]; then
            CGO_ENABLED=1 CC=${CC}/aarch64-linux-android33-clang GOARCH=arm64 GOOS=android go build -v -trimpath -ldflags "-X 'github.com/sagernet/sing-box/constant.Version=${VERSION} ${BUILDDATE}' -s -w -buildid=" -tags ${TAGS} -o bin/sing-box-${VERSION}-android-arm64 ./cmd/sing-box
            tar -czvf "bin/sing-box-${VERSION}-android-arm64.tar.gz" "bin/sing-box-${VERSION}-android-arm64"
            rm -rf "bin/sing-box-${VERSION}-android-arm64"

            CGO_ENABLED=1 CC=${CC}/aarch64-linux-android33-clang GOARCH=arm64 GOOS=android go build -v -trimpath -ldflags "-X 'github.com/sagernet/sing-box/constant.Version=${VERSION} ${BUILDDATE}' -s -w -buildid=" -tags 'with_quic,with_clash_api' -o bin/sing-box-litetags-${VERSION}-android-arm64 ./cmd/sing-box
            tar -czvf "bin/sing-box-litetags-${VERSION}-android-arm64.tar.gz" "bin/sing-box-litetags-${VERSION}-android-arm64"
            rm -rf "bin/sing-box-litetags-${VERSION}-android-arm64"
          elif [[ "${{ matrix.job.type}}" == "armv7" ]]; then
            CGO_ENABLED=1 CC=${CC}/armv7a-linux-androideabi33-clang GOARCH=arm GOARM=7 GOOS=android go build -v -trimpath -ldflags "-X 'github.com/sagernet/sing-box/constant.Version=${VERSION} ${BUILDDATE}' -s -w -buildid=" -tags ${TAGS} -o bin/sing-box-${VERSION}-android-armv7 ./cmd/sing-box
            tar -czvf "bin/sing-box-${VERSION}-android-armv7.tar.gz" "bin/sing-box-${VERSION}-android-armv7"
            rm -rf "bin/sing-box-${VERSION}-android-armv7"

            CGO_ENABLED=1 CC=${CC}/armv7a-linux-androideabi33-clang GOARCH=arm GOARM=7 GOOS=android go build -v -trimpath -ldflags "-X 'github.com/sagernet/sing-box/constant.Version=${VERSION} ${BUILDDATE}' -s -w -buildid=" -tags 'with_quic,with_clash_api' -o bin/sing-box-litetags-${VERSION}-android-armv7 ./cmd/sing-box
            tar -czvf "bin/sing-box-litetags-${VERSION}-android-armv7.tar.gz" "bin/sing-box-litetags-${VERSION}-android-armv7"
            rm -rf "bin/sing-box-litetags-${VERSION}-android-armv7"
          fi

      - name: display tags
        if: ${{  success() }}
        run: |
          echo "${TAGS}" > bin/tags.txt
          
      - uses: actions/upload-artifact@v3
        if: ${{  success() }}
        with:
          name: singbox
          path: bin/

  upload:
    name: telegram upload release
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v3
        with:
          name: singbox
          path: bin/

      - name: upload to telegram
        if: ${{  success() }}
        env:
          CHAT_ID: "-1001597117128"
          MESSAGE_THREAD_ID: "282263"
          API_ID: ${{ secrets.API_ID }}
          API_HASH: ${{ secrets.API_HASH }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          if [ ! -z "${{ secrets.BOT_TOKEN }}" ]; then
            export VERSION=$(git describe --tags --abbrev=0)_$(git rev-parse --short HEAD)
            export COMMIT=$(git log --oneline -n 10 --no-decorate | sed 's/^[0-9a-f]* //' | sed 's/^/â€” /')
            export TAGS=$(cat bin/tags.txt)
            FILE=$(find bin -name "*.gz")
            pip3 install telethon==1.31.1
            python3 $GITHUB_WORKSPACE/.github/taamarinbot.py $FILE
          fi
